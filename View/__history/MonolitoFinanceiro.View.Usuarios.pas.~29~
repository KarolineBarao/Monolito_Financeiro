unit MonolitoFinanceiro.View.Usuarios;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, MonolitoFinanceiro.View.CadastroPadrao,
  Data.DB, System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls,
  Vcl.ExtCtrls, Vcl.WinXPanels, MonolitoFinanceiro.Model.Usuarios, Vcl.WinXCtrls,
  MonolitoFinanceiro.Utilitarios;

type
  TfrmUsuarios = class(TfrmCadastroPadrao)
    edtNome: TEdit;
    edtLogin: TEdit;
    edtSenha: TEdit;
    ToggleStatus: TToggleSwitch;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    procedure btnPesquisarClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
  private
    { Private declarations }
    procedure LimparCampos;
  public
    { Public declarations }
  end;

var
  frmUsuarios: TfrmUsuarios;

implementation

{$R *.dfm}

procedure TfrmUsuarios.btnCancelarClick(Sender: TObject);
begin
  inherited;
  dmUsuarios.cdsUsuarios.Cancel;


end;

procedure TfrmUsuarios.btnPesquisarClick(Sender: TObject);
begin
  inherited;
  dmUsuarios.cdsUsuarios.Close;
  dmUsuarios.cdsUsuarios.CommandText := 'Select id,nome,login,senha,status from usuarios';
  dmUsuarios.cdsUsuarios.Open;
  //dmConexao.FDQuery1.SQL.Clear;
 // dmConexao.FDQuery1.SQL.Add('Select id,nome,login from usuarios');
// dmConexao.FDQuery1.Open();
end;

procedure TfrmUsuarios.btnSalvarClick(Sender: TObject);

//validações
var
  LStatus : String;

begin
  if Trim(edtNome.Text) = '' then
  begin
    edtNome.SetFocus;
    Application.MessageBox('O campo nome não pode ser vazio.', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort
  end;

   if Trim(edtLogin.Text) = '' then
  begin
    edtLogin.SetFocus;
    Application.MessageBox('O campo login não pode ser vazio.', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort
  end;

   if Trim(edtSenha.Text) = '' then
  begin
    edtSenha.SetFocus;
    Application.MessageBox('O campo senha não pode ser vazio.', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort
  end;

  LStatus := 'A';
  if ToggleStatus.State = tssOff then
    LStatus := 'B';


    if dmUsuarios.cdsUsuarios.State in [dsInsert] then
    begin
      dmUsuarios.cdsUsuariosid.AsString := TUtilitario.GetID;
      dmUsuarios.cdsUsuariosdata_cadastro.AsDateTime := now;
    end;

    dmUsuarios.cdsUsuariosnome.AsString := Trim(edtNome.Text);
    dmUsuarios.cdsUsuarioslogin.AsString := Trim(edtLogin.Text);
    dmUsuarios.cdsUsuariossenha.AsString := Trim(edtSenha.Text);
    dmUsuarios.cdsUsuariosstatus.AsString := LStatus;

    //aplica as atualizações

    dmUsuarios.cdsUsuarios.Post;
    dmUsuarios.cdsUsuarios.ApplyUpdates(0);
    Application.MessageBox('Alteração feita com sucesso!', 'Atenção', MB_OK + MB_ICONINFORMATION);

    PnlPrincipal.ActiveCard := CardPesquisa;

  inherited;


end;

procedure TfrmUsuarios.Button1Click(Sender: TObject); //botão incluir
begin
  inherited;
  LimparCampos;
  dmUsuarios.cdsUsuarios.Insert;
end;

procedure TfrmUsuarios.Button2Click(Sender: TObject);  //botão alterar
begin
  inherited;
  dmUsuarios.cdsUsuarios.Edit;

  //carrega na tela o usuario selecionado
  edtNome.Text := dmUsuarios.cdsUsuariosnome.AsString;
  edtLogin.Text := dmUsuarios.cdsUsuarioslogin.AsString;
  edtSenha.Text := dmUsuarios.cdsUsuariossenha.AsString;

  ToggleStatus.State := tssOn;
  if dmUsuarios.cdsUsuariosstatus.AsString = 'B' then
    ToggleStatus.State := tssOff;


end;

procedure TfrmUsuarios.FormShow(Sender: TObject);
begin
  inherited;
  PnlPrincipal.ActiveCard := CardPesquisa;
end;

procedure TfrmUsuarios.LimparCampos;
var
  Contador : Integer;
begin
  for Contador := 0 to Pred(ComponentCount) do
    begin
      if Components[Contador] is TCustomEdit then
        TCustomEdit(Components[Contador]).Clear
      else if Components[Contador] is TToggleSwitch then
           TToggleSwitch(Components[Contador]).State := tssOn;
    end;

end;

end.
